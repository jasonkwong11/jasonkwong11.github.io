---
layout: post
title:  "I Have Notes from POODR: Managing Dependencies and Creating Flexible Interfaces"
date:   2016-10-30 15:00:04-0400
---
Hello! This is the second part of my I Have Notes from POODR series of blog posts. This post highlights Sandi Metz's thoughts on managing dependencies and creating flexible interfaces, which is extremely important when designing good OO code. Of course, POODR is a must read for any new OO language programmer and I highly recommend investing in a copy of the book. https://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330

Managing Dependencies

OO is efficient and effective because of the way they model reality. It reflects qualities of real-world problems and interactions between those objects provide solutions. This means objects must collaborate and this creates dependencies: if not managed carefully, these dependencies will strangle your application.

An object has a dependency when it knows: the name of another class, the name of a message that it intends to send to someone other than self, the arguments that a message requires, the order of those arguments. Each of these dependencies creates a chance that one class will be forced to change because of the other.

So our design goal: manage dependencies so that each class has the fewest possible. A class should know just enough to do its job and nothing more.

To Decouple Dependencies: 

- Use dependency injection (inject an object through initialize that responds to the method you need in the initialize method). Then you won't have to use the class name (e.g.: Wheel.new). 
- Isolate instance creation 
- Isolate vulnerable external messages
- Remove argument order dependencies: the fixed order of arguments you pass is also a dependency. To avoid this dependency, use a hash argument instead of a fixed list parameters if you have many arguments to intialize
- Isolate multiparameter initialization: what if you are forced to depend on a method that requires fixed-order arguments where you do not own thus cannot change the method itself?
		1. DRY out the creation of the new class instances by creating a single method to wrap the external interface
		2. Use name spaced modules to create Factories by wrapping the class in the module

Reversing Dependencies: reversing the direction of the dependency may make the future of the app easier to work with and maintain

Simple Truths about Code:
 	1. Some classes are more likely than others to have changes in requirements
	2. Concrete classes are more likely to change than abstract classes
	3. Changing a class that has many dependents will result in widespread consequences

Recognizing Concretions and Abstractions: use duck types (wheel.diameter not Wheel.new.diameter) because it's more abstract and abstraction is more stable


Creating Flexible Interfaces 

Design must be concerned with the messages that pass between objects. It deals not only with what objects know (their responsibilities) and who they know (their dependencies), but how they talk to one another: their interfaces.

The best way to conduct business is to have public and private interfaces:

Public Interfaces: reveal its primary responsibility... are expected to be invoked by others... will not change on a whim... are safe for others to depend on ... are thoroughly documented in the tests

Private Interfaces: handle implementation details... are not expected to be sent by other objects ... can change for any reason whatsoever... are unsafe for others to depend on ... may not even be referenced in the tests

Public methods should read like a description of responsibilities. Tip: Domain objects are like Trip, Route, Bike, Mechanic classes. They are obvious because they stand for big real-world things that will end up with a representation in the db. They are easy to find but not at the design center of your application. They can be a trap. If you fixate on them, you will tend to coerce behavior into them. Instead, notice them without concentrating on them. Focus on the messages that pass between them, which are guides that lead you to discover other objects. Ones that are just as necessary but far less obvious.

Before you start typing, you should form an intention about the objects and the messages needed to satisfy this use case. Sequence diagrams explicitly specify the messages that pass between objects, and because objects should only communicate using public interfaces, sequence diagrams are vehicle for exposing, experimenting with, and ultimately defining those interfaces.

Instead of deciding on a class and figuring out it's responsibilities, you should decide on a message and figure out where to send it: yields more flexible applications. Instead of "I know I need this class, what should it do?", ask yourself: "I need to send this message, who should respond to it?"

Asking for What Instead of Telling How:
	-Distinction between a message that asks for what the sender wants (GOOD) versus a message that tells the receiver how to behave (BAD). Trip has a public interface that includes bicycles and wants each of its bicycles prepared. It trusts Mechanic to accomplish this task. Because the responsibility for knowing how has been ceded to Mechanic, Trip will always get the correct behavior regardless of future improvements to Mechanic.

Seeking Context Independence:
	The best possible situation is for an object to be completely independent of its context. An object that could collaborate with others without knowing who they are or what they could do could be reused in novel and unanticipated ways.

Writing Code that Puts its Best Inter(face) Forward:
	Create your interfaces intentionally, they define your application and its future. Here are rules-of-thumb for creating interfaces:
	1. Create Explicit Interfaces: Public methods should: ...be explicitly identified as such... be more about what than how... have names that, insofar as you can anticipate, will not change... take a hash as a options parameter.
	2. Use Public, Protected, and Private Keywords: they indicate which methods are stable and which are unstable. Also control how visible a method is to other parts of your application.
		a. Private: the least stable kind of method and provides the most restricted visibility: must be call with an implicit receiver, or inversely may never be called with an explicit receiver
		b. Protected: indicates an unstable method, but one with slightly different visibility restrictions. Allows explicit receivers as long as the receiver is self or an instance of the same class of subclass of self.
		c. Public: method is stable, visible everywhere
Use private and protected keywords when: ... you believe you have better information today than programmers will have in the future... you believe those future programmers need to be prevented from accidentally using a method that you currently consider unstable.

Honor the Public Interfaces of Others:

Exercise Caution when Depending on Private Interfaces: this is a dangerous dependency that should be isolated. If you can't avoid using a private method, prevent the method from being referenced in many places in your application. Isolate the dependency by minimizing it's context. Construct public interfaces with an eye toward minimizing the context towards minimizing the context they require from others. Keep the what versus how distinction in mind. 

Law of Demeter: set of coding rules that result in loosely coupled objects, a virtue.
	-Demeter restricts the set of objects to which a method may send messages; it prohibits routing a message to a third object via a second object of a different type. ("Only talk to your immediate neighbors")
	-Example of a Demeter violation: customer.bicycle.wheel.rotate

Consequences of Violations: balance the likelihood and cost of change against the cost of removing the violation

Avoiding violations: one common way to remove "train wrecks" from code is to use delegation to avoid the "dots". In OO, to delegate a message is to pass it on to another object, often via a wrapper method... but beware: using delegation to hide tight coupling is not the same as decoupling the code.

Listening to Demeter: 
Message chains like customer.bicycle.wheel.rotate occur when your design thoughts are influenced by objects you already know.. This coupling causes all kinds of problems. It raises the trips that a parent class will be forced to change because of an unrelated change somewhere in the message chain. It binds itself to a very specific implementation and cannot be reused in an other context. 

Train wrecks of Demeter violations are clues that there are objects who's public interfaces are lacking. Listening to Demeter means paying attention to your point of view. If you shift to a message -based perspective, the messages you find will become public interfaces in the objects they lead you to discover. However if you are bound by the shackles of existing domain objects, you'll end up assembling their existing public interfaces into long message chains and thus will miss the opportunity to find and construct flexible public interfaces. 

Thanks for reading! The next post will cover reducing costs with duck typing and acquiring behavior through inheritance.

-Jason
