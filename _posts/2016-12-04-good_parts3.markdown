---
layout: post
title:  "Functional Invocation Patterns and Augmentation (JS: Good Parts)"
date:   2016-12-04 12:00:01-0400
---

Ever wish you could you had intuitive methods from another language that the standard JS library doesn't have? Great news: you can make your own with by augmenting Object prototypes! Read on to learn more. (Also buy Douglas Crockford's Javascript: The Good Parts!!)


Functions are the fundamental modular unit of javascript. They enclose a set of statements, used for code reuse, information hiding and composition. They specify the behavior of objects. 

Functions as Objects

- Functions in JS are objects. Objects are collections of name/value pairs having a hidden link to a prototype object. Objects produced from object literals are linked to Object.prototype. Function objects are linked to Function.prototype (which is itself linked to Object.prototype).
  
-Functions are created with two additional hidden properties: the function’s context and the code that implements the function’s behavior.
  
-Function objects are created with a prototype property. It’s value is an object with a constructor property who’s value is the function. This is distinct from the hidden link to Function.prototype.

-Since functions are objects they can be used like any other value: stored in variables, objects, arrays… can be passed as arguments to functions… can be returned from functions…. can have methods… can be invoked.

Functions as Literals:

Function objects can be created with with function literals. A function can use its name to call itself recursively. Functions can be defined inside other functions. Inner functions can access it’s outer function’s parameters and variables. Inner functions can also access parameters and variables of functions nested within it.

** The function object created by a function literal contains a link to that outer context. This is called closure.

      var add = (function () {
          var counter = 0;
          return function () {return counter += 1;}
      })();

      add();
      add();
      add();

      // the counter is now 3
        
Invocation: invoking a function suspends the execution of the current function passing control and parameters to the new function. 

In addition to the declared params, every function receives two additional params: “this” and “arguments”

This: very important for OO programming, it’s value is determined by the invocation pattern. There are four invocation patterns in Javascript (these patterns differ in how “this” is initialized):

1. Method invocation pattern:

When a function is stored as a property of an object, we call it a method. When a method is invoked, THIS is bound to that object. If an invocation expression contains a refinement (which is a . dot expression of [subscript] expression), it is invoked as a method

    var myObject = {
      value: 0,
      increment: function (inc) {
        this.value += type inc === ‘number’ ? inc : 1;
      }
    }

^^ A method can use THIS to access the myObject so it can retrieve values from the object or modify the object. The binding of THIS to the object happens at invocation time (this very late binding makes functions that use THIS highly reusable). Methods that get their object context from THIS are called public methods. 

2. Function invocation pattern:

When a function is not the property of an object, then it is invoked as a function:
   var sum = add(3, 4)
 
-When a function is invoked with this pattern, THIS is bound to the global object. This was a mistake in the design of the language. (When the inner function is invoked, this would still be bound to the this of the outer function)

=> A consequence of this error is that a method can employ an inner function to help it do its work because the inner function doesn’t share access to the method’s access to the object as its THIS is bound to the wrong value.

=> solution: assign THIS to a variable. that variable will have access to THIS through the variable:

    myObject.double = function (){
      var that = this; 
      var helper = function(){
        that.value = add(that.value, that.value);
      };
      helper();
    };

3. Constructor invocation pattern:

Javascript is a prototypal inheritance language. That means that objects can inherit properties directly from other objects. The language is class-free.

** If a function is invoked with the new prefix, then a new object will be created with a hidden link to the value of the function prototype member, and this will be bound to that new object.

    //Create a constructor function called Quo.
    // It makes an object with a status property.

    var Quo = function (string) {
      this.status = string;
    }

    //Give all instances of Quo a public method
    //called get_status

    Quo.prototype.get_status = function(){
      return this.status;
    }

    //Make an instance of Quo.
    
    var myQuo = new Quo(“confused”);

    document.writeIn(myQuo.get_status()); // confused

** Functions that are intended to be used with the new prefix are called constructors. By convention, they are kept in variables with a capitalized name. 
The new prefix also changes the behavior of the return statement. 

**Important: if a constructor is called without the new prefix, very bad things will happen without a compile-time or runtime warning.

** use of this style of constructor functions is not recommended. There are better alternatives

4: Apply invocation pattern:

Remember that functions can have methods? The apply method lets us construct an array of arguments to use to invoke a function. It also lets us choose the value of this. 

The apply method takes two parameters. The first is the value that should be bound to THIS. The second is an array of parameters.

    //Make an array of two numbers and add them:

    var array = [3, 4];
    var sum = add.apply(null, array); // sum is 7

    // Make an object with a status member.
    
    var statusObject = {
      status: ‘A-OK’
    };

    // statusObject does not inherit from Quo.prototype,
    //but we can invoke the get_status method on statusObject
    //even though statusObject doesn’t have a get_status method

    var status = Quo.prototype.get_status.apply(statusObject);
    // status is ‘A-OK’
  
Arguments:

A bonus parameter that is available to functions when they are invoked is the arguments array. 

Arguments array gives the function access to the arguments that were supplied with the invocation. This includes excess arguments that were not assigned to params. This makes it possible to write functions that take an unspecified number of parameters:
  
    // Make a function that adds a lot of stuff

    //Note that defining a variable sum inside of 
    // the function does not interfere with the sum
    // defined outside of the function. The function
    // only sees the inner one.

    var sum = function (){
      var i, sum = 0;
      for (i = 0; i < arguments.length; i +=1 ){
        sum += arguments[i]
      }
      return sum;
    };

This is not a useful pattern: we will see how we can add a similar method to an array. Because of a design error, arguments is not really an array. It is an array like object. Arguments has a length property, but it lacks all of the array methods. :(

Return:

When a function is invoked, it begins execution with the first statement, and ends when it hits the } that closes the function body. => causing the function to return control to the part of the program that invoked the function.

Use the return statement to cause the function to return early. A function will always return a value. If the return value is not specified, it returns undefined. If the function was invoked with the new prefix, and the return value is not an object, then THIS (the new object) is returned instead.

Exceptions: unusual (but not completely unexpected) mishaps that interfere with the normal flow of a program. If detected, your program should throw an exception.

    var add = function (a, b){
      if (typeof a !== ‘number’ || typeof b !== ‘number’){
        throw {
          name: ‘TypeError’,
          message: ‘add needs numbers’
        }
      };
    };

** Throw statement interrupts the execution of the function. It should be given an exception object that contains a name property which identifies the type of exception (‘TypeError’) and a descriptive message property (‘add needs numbers’). You can also add properties

==> If an exception is thrown within a try block, control will go to its catch clause:

    //Make a try_it function that calls the new add function incorrectly

    var try_it = function () {
      try {
        add(“seven”);
      } catch (e) {
        document.writeIn(e.name + “: “ + e.message);
      }
    }; 

    try_it();

** A try statement has one catch block that will catch al exceptions. If your handling depends on the type of exception, then the exception handler will have to inspect the name to determine the type of the exception.

Augmenting Types: JS allows the basic types of the language to be augmented. In Ch 3, we saw that adding a method to Object.prototype makes that method available to all objects. This also works for functions, arrays, strings, numbers, regex, and booleans.

For example, by augmenting Function.prototype, we can make a method available to all functions:
  
    Function.prototype.method = function (name, func){
      this.prototype[name] = fun;
      return this;
    };

By augmenting Function. prototype with a method method, we no longer have to type the name of the prototype property. That big of ugliness can now be hidden.

Another example: JS does not have a separate integer type but sometimes you need to extract just the integer part of the number. We can add an integer method to Number.prototype. It uses either Math.ceiling or Math.floor, depending on the sign of the number:

    Number.method(‘integer’, function(){
      return Math[this < 0 ? ‘ceiling’ : ‘floor’](this);
    });

Another example: JS lacks a method that removes spaces from the ends of a string. We can make a method that does this:

    String.method(‘trim’, function(){
      return this.replace(/^s+|\s+$/g, ‘’);
    })
  
**Because of the dynamic nature of JS’s prototypal inheritance, all values are immediately endowed with new methods, even values that were created before the methods were created.

The prototypes of the basic types are public structures, so be careful when mixing libraries. One defensive technique is to add a method only if the method is known to be missing:

    // Add a method conditionally
    Function.prototype.method = function (name, func) {
      if (!this.prototype[name]){
        this.prototype[name] = func;
      } 
    }

Another concern: the “for in” statement interacts badly with prototypes. Solution: we can use hasOwnProperty method to screen out inherited properties and look for specific types.
