---
layout: post
title:  "JS Ninja: Intro to Promises"
date:   2017-05-26 12:00:01-0400
---
A promise: is a placeholder for a value that we don’t have now but will have later; it’s a guarantee that we’ll eventually know the result of an asynchronous computation.
  … If we make good on our promise, our result will be a value.
  … If a problem occurs, our result will be an error, an excuse for why we couldn’t deliver.

One great example of using promises is fetching data from a server; we promise that we’ll eventually get the data, but there’s always a chance that problems will occur

Creating a simple promise:

    const ninjaPromise = new Promise( (resolve, reject) => {

    //^^ Creates a promise by calling a built-in Promise constructor and passing in a callback function with two parameters: resolve and reject

      resolve(“Hattori”);
      //reject(“An error resolving a promise!”);
      //^^ A promise is successfully resolved by calling the passed-in resolve function (and rejected by calling the reject function.)
    });

    ninjaPromise.then(ninja => {
      assert(ninja === “Hattori”, “We were promised Hattori”);

      //By using the then method on a promise, we can pass in two callbacks; the first is called if a promise is successfully resolved.

    }, err => {

    //^^ … and the second is called if an error occurs 

      fail(“There shouldn’t be an error”)
    })

To create a new Promise, we use the new built-in Promise constructor, to which we pass a function, in this case, an arrow function. 

This function, called an executor function (meaning its called immediately), has two params: resolve and reject. The executor is called immediately when constructing the Promise object with two built-in functions as arguments: solve which we manually call if we want the promise to resolve successfully and reject, which we call if an error occurs.
