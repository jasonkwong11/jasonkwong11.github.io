---
layout: post
title:  "Proxies to Autopopulate Properties"
date:   2017-08-13 12:00:01-0400
---
In addition to simplifying logging, proxies can be used for auto populating properties. For example, imagine that you have to model your computer’s folder structure, in which a folder object can have properties that can also be folders.

Now imagine that you have to model a file at the end of a long path such as this:

    rootFolder.ninjasDir.firstNinjaDir.ninjaFile = “yoshi.text”

To create this, you might write something along the following lines:

    const rootFolder = new Folder();
    rootFolder.ninjasDir = new Folder();
    rootFolder.ninjasDir.firstNinjaDir = new Folder();
    rootFolder.ninjasDir.firstNinjaDir.ninjaFile = “yoshi.txt”;

This is tedious. So use auto populating properties:

    function Folder(){
        return new Proxy( {}, {
            get: (target, property) => {
                report(“Reading ” + property);

                //^^ Logs all readings to our object

                if (! (property in target )) {
                    target[property] = new Folder(); 
                }

                //^^ If the accessed property doesn’t exist, we create it   
            
                return target[property];
            }
        });
    }

    const rootFolder = new Folder();

Whenever a property is accessed, the get trap, which creates a property if it doesn’t exist, is activated.

    try {
        rootFolder.ninjasDir.firstNinjaDir.ninjaFile = “yoshi.txt”;
        pass(“An exception wasn’t raised”);
    } catch (e) {
        fail(“An exception has occurred”);
    }

We’re accessing a property, firstNinjaDir, of an undefined property, ninjasDir, of the rootFolder object. But if we run the code, you see that all is well.
    … This happens because we’re using proxies. Every time we access a property, the proxy get trap is activated. If our folder object already contains the requested property, its value is returned, and if it doesn’t a new folder is created and assigned to the property.
    ==> This is how two of our properties, ninjasDir and firstNinjaDir are created

Requesting a value of an uninitialized property triggers its creation

PERFORMANCE COST OF PROXIES

As we already know, a proxy is just a surrogate object through which we control access to another object. 

A proxy can define traps, functions that will be executed whenever a certain operation is performed on a proxy.

Unfortunately there’s also a downside. The fact that all our operations have to pass through the proxy adds an additional layer of indirection that enables us to implement all these cool features, but at the same time it introduces a significant amount of additional processing that impacts performance.

In chrome, proxies are around 50 time slower, in firefox, proxies are 20 times slower.
