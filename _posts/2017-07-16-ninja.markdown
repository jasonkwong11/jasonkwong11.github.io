---
layout: post
title:  "Implementing Inheritance in ES6"
date:   2017-07-16 12:00:01-0400
---
The previous way we implemented inheritance was very complex and had a lot to remember:
 1. Methods accessible to all instances should be added directly to the prototype of the constructor function, as we did with the dance method and the Person constructor
    
 2. We have to set the prototype of the derived “class” to the instance of the base “class”. In this case, we assigned a new instance of Person to Ninja.prototype
 3. ^^ This messes up the constructor property, so we have to manually restore it with the Object.defineProperty method.

Luckily with ES6, all of this is significantly simplified:

    Example: Inheritance in ES6

    class Person {
        constructor (name) {
            this.name = name;
        }

        dance(){
            return true;
        }

    }

    class Ninja extends Person {

    //^^ uses the extends keyword to inherit from another class

        constructor(name, weapon){
            super(name);

            // ^^ Uses the super keyword to call the base class constructor (the Person class)

            this.weapon = weapon;
        }

        wieldWeapon(){
            return true;
        }
    }

    var person = new Person(“Bob”);

    assert(person instanceof Person, “A person’s a person”);
    assert(person.dance(), “A person can dance.”);
    assert(person.name === “Bob”, “We can call it by name.”);
    assert(!(person instanceof Ninja), “But it’s not a Ninja”);
    assert(!(“wieldWeapon” in person), “And it cannot wield a weapon”);

    var ninja = new Ninja(“Yoshi”, “Wakizashi”);

    assert(ninja instanceof Ninja, “A ninja’s a ninja”);
    assert(ninja.wieldWeapon(), “That can wield a weapon”);
    assert(ninja instanceof Person, “But it’s also a person”);
    assert(ninja.name === “Yoshi”, “That has a name”);
    assert(ninja.dance(), “And enjoys dancing”);
