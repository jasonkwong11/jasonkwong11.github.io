---
layout: post
title:  "JS Ninja: Closures"
date:   2017-03-17 12:00:01-0400
---
Closures are a defining feature of Javascript. They can not only help us reduce the amount of complexity of code needed to add advanced features, but also enable us to do things that otherwise wouldn't be possible or would be too complex:

For example:
1. Any tasks involving callbacks, such as event handling or animations would be significantly more complex without closures.
2. Providing support for private object variables would be outright impossible.

Traditionally closures have been a feature of purely functional programming languages.
Closures are a side effect of how scopes work in JS: for this reason, we’ll explore the scoping rules of JS, with a special focus on recent additions.

Understanding Closures:

A closure allows a function to access and manipulate variables that are external to that function. Closures allow a function to access all the variables, as well as other functions, that are in scope when the function itself is defined. (Remember that a declared function can be called at any later time, even after the scope in which it was declared has gone away.)

Scope: refers to the visibility of identifiers in certain parts of a program. A scope is part of the program in which a certain name is bound to a certain variable.
	
Here’s an example of a simple closure:

		var outerValue = “ninja”;	// Defines a value in global scope.
		
		function outerFunction(){
			assert(outerValue === “ninja”, “I can see the ninja.”);	// Declares a function in global scope
		}

		outerFunction();  // Executes the function

^^ Not surprising. Both outerValue and outerFunction are declared in global scope, that scope (which is a closure), never goes away. It’s not surprising that the function can access the variable, because it’s still in scope and viable.

Here’s another closure example:

			var outerValue = “samurai”;
			var later;	// An empty variable that we’ll use later

			function outerFunction(){
				var innerValue = “ninja”;	
				// ^^ Declares a value inside the function. This variable’s scope is limited to the function and can’t be accessed from outside the function.
			
				function innerFunction(){
					assert(outerValue === “samurai”, “I can see the samurai.”);
					assert(innerValue === “ninja”, “I can see the ninja.”)
				}

				// ^^Declares an inner function within the outerFunction. innerValue is in scope when we create this function.


				later = innerFunction;
				// ^^ stores a reference to innerFunction in the later variable. Because later is in the global scope, it’ll allow us to call the function later
			}

			outerFunction();
			// Invokes outerFunction, which causes innerFunction to be created and its reference assigned to later

			later();
			// Invokes innerFunction through later. We can’t invoke it directly because its scope (along with innerValue) is limited to within outerFunction.

Lets over analyze the code in innerFunction to see what we may predict:

1. When we call later, we might expect innerFunction to fail, but it works because closures keep the scope in which the function was defined.

… ****This is how Closures work**** When we declare innerFunction inside the outer function, not only is the function declaration defined but a closure is created that encompasses the function definition as well as all the variables in scope at THE POINT OF FUNCTION DEFINITION

…*** It’s important to remember that each function that accesses information via a closure has a “ball and chain” attached to it, carrying this information around. So although closures are incredibly useful, they aren’t free of overhead.

=> all that information needs to be held in memory until it’s absolutely clear to the JS engine that it’s no longer needed (and is safe to garbage-collect), or until the page unloads.

Putting Closures to Work:

Here are the practical aspects and benefits:

1. MIMICKING PRIVATE VARIABLES:

Many programming languages use private variables—properties of an object that are hidden from outside parties. This is a useful feature, because we don’t want to overburden the users of our objects with unnecessary implementation details when accessing those objects from other parts of the code. By using closures, we can achieve an acceptable approximation:

Here’s an example of using closure to approximate private variables:

			// Defines a the constructor for a Ninja: 

			function Ninja() {
				var feints = 0;

				// ^^ Declares a variable inside the constructor function. Because the scope of the variable is limited to inside the constructor, it’s a “private” variable. We’ll use it count how many times the ninja has feinted.
					
				this.getFeints = function (){
					return feints;
				};

				// ^^ Creates an accessor method for the feints counter. Because the variable isn’t accessible to code outside the constructor, this is a common way to give read-only access to the value.
			
				this.feint = function(){
					feints++;
				};

				// ^^Declares the increment method for the value. Because the value is private, no one can screw it up behind our backs; they’re limited to the access that we give them via methods.

				var ninja1 = new Ninja(); 
				ninja1.feint();

				// ^^ Calls the feint method, which increments the count of the number of times that our ninja has feinted.
				
				assert(ninja1.feints === undefined,
					“And the private data is inaccessible to us.”);
				// ^^ verifies that we can’t get at the variable directly

				assert(ninja1.getFeints() === 1,
					“We’re able to access the internal feint count.”);
				// ^^ We were able to change the “private” variable, even though we had no direct access to it.
				
				var ninja2 = new Ninja();
				assert(ninja2.getFeints() === 0,
					“The second ninja object gets its own feints variable.”);
				// ^^ When we create a new ninja2 object with the Ninja constructor, the ninja2 object gets its own feints variable.

			}
			
Using closures allows the state of the ninja to be maintained within a method, without letting it be directly accessed by a user of the method — because the variable is available to the inner methods via their closures, but not to code that lies outside the constructor.
	
USING CLOSURES WITH CALLBACKS:

Another common use of closures occurs when dealing with callbacks — when a function is called at an unspecified later time. Often, within such functions, we frequently need to access outside data. 

Here is an example that creates a simple animation with callback timers:

			<div id=“box1”> First Box </div>	//creates the element that we’re going to animate
			<script>
				function animateIt(elementId) {
					var elem = document.getElementById(elementId);
					// ^^ Inside the animateIt function, we get a reference to that element
				
					var tick = 0; 
					// ^^ Establishes a counter to keep track of animation ticks (steps)

					//below: a built-in function that creates and starts an interval timer, given a callback
					var timer = setInterval( function() { 

						// below: the timer callback is invoked every 10 milliseconds. For 100 ticks, it adjusts the position of the element:

						if (tick < 100){
							elem.style.left = elem.style.top = tick + “px”;
							tick ++;
						} else {
							clearInterval(timer);

							assert( tick === 100,
								“Tick accessed via a closure.”);
							//^^ After 100 ticks, we stop the timer and perform tests to assert that we can see all relevant variables needed to perform the animation.
						
							assert( elem,
								“Element also accessed via closure.”);
							assert( timer,
								“Timer reference also obtained via a closure.”);
						}
					}, 10);
					// ^^ The setInterval duration — the callback will be called every 10ms.
				}
				animateIt(“box1”); // Now that it’s all set up, we set it in motion.
			</script>

^^ What’s important about this code is that it uses a single anonymous function, placed as a setInterval argument, to accomplish the animation of the target div element.

That function accesses three variables: elem, tick, and timer, via a closure, to control the animation process. The three variables (the reference to the DOM element, elem; the tick counter, tick; and the timer reference, timer) all must be maintained across the steps of the animation.

Why not keep the variables in the global scope?

If we keep the variables in the global scope, we need a set of three variables for each animation. Otherwise, they’ll all step over each other, trying to use the same set of variables to keep track of multiples states.

By defining the variables inside the function, and by relying on closure to make them available to the timer callback invocation, each animation gets its own private “bubble” of variables.

Without closures, doing multiple things at once, whether event handling, animations, or even server requests, would be incredibly difficult. 

This example is good for demonstrating how closures are capable of producing some surprisingly intuitive and concise code. By including the variables in the animateIt function, we create an implied closure without needing any complex syntax.

Another important concept that this example makes clear: not only can we see the values that these variables had at the time the closure was created, but we can update them within the closure while the function within the closure executes.

The closure isn’t just a snapshot of the state of the scope at the time of creation, but an active encapsulation of that state that we can modify as long as the closure exists.
