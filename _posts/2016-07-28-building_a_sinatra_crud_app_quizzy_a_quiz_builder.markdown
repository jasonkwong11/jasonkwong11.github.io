---
layout: post
title:  "Building a Sinatra CRUD app: quizzy, a quiz builder"
date:   2016-07-28 15:58:42 -0400
---

Quizzy is a Sinatra app that lets users create quizzes and answer keys. Users sign-up and log in to their accounts to create quizzes and answer keys as well as view quizzes other people create. This app uses a sqlite database, ActiveRecord, RESTful routes, Sinatra sessions, and encrypts passwords using bcrypt. Only the creator of each quiz can edit the questions or delete the quiz, but everyone can view each other's quizzes and answer keys. I hope to add additional functionality to the app in the future. Where users can take each other's quizzes and automatically be given grades on each quiz, as well as their overall "class average" for all quizzes they've taken. 

The amount of creativity and control over the creation of this Sinatra app made for a satisfying experience that reaffirmed my love of development and web design. I was engaged the entire time, solving problems and found myself in the vaunted "flow" state while writing the controllers and thinking about how to implement the views. You feel amazing after each "win": whether that's perfecting the signup, log in/out or implementing the edit questions and delete quiz functionality, or just seeing the quiz objects appear on the quizzes page. Below are specific lessons learned, often through difficulties, in the making of this project:

1. Specialized user models I thought were necessary weren't actually necessary: Initially I thought a "teacher" and a "student" model was necessary to separate the concerns of the different account types. However, the more I thought about it, the more I realized that wasn't necessary. If only the user can edit or delete a quiz associated with a specific user_id, it doesn't matter if that user is classified as a Teacher or a Student. Also the functionality of the app can be expanded if you allow everyone, not only teachers to create quizzes. So instead of simple teachers quizzing the students, students can also quiz each other, allowing for greater learning opportunities.

2. Using the bcrypt gem has initially a bit confusing. From a previous project, I learned that adding the password_digest column and trying to implement bcrypt after creating your entire app will basically break the functionality of of the login and authentication process. For this project, I made sure to use bcrypt from the very start. Since I added the "password_digest" column to the users table instead of a "password" column, I was unclear whether I could still call the password method in the controllers. Thankfully, I still could! 

3. UI design. The realization when building a quiz builder is that you're essentially designing a form to build another form. How to best implement a web app interface for this was one of the biggest challenges. At first I considered creating a single page form where the user can add their questions and multiple choice possibilities, similar to a Survey Monkey survey builder. I quickly realized that this page would be too congested. The solution would be to have the user click through each page, which contains a single question on each page.
