---
layout: post
title:  "Rails Angular App - Realest Comps: Real Estate Investor-Relevant Data for Property Comps Without the Clutter"
date:   2016-09-29 15:00:07 -0400
---


For my final Flatiron School project, I created a Rails-Angular app called Realest Comps. Realest Comps provides real estate investors comps (comparable properties) data for a potential investment. A comp, or comparable property, is a property that is compared to a potential investment property that an investor is deciding on whether to pursue (the principal property). A comp is a comp because it shares many similar characteristics, whether that be location, design, number of bedrooms/bathrooms, etc. with the principal property so it is regarded, among other comps, to be an accurate reference point on what an investor can expect from the principal property after renovations, market fluctuations, etc.
	
An important part of investing in real estate is researching comps to either confirm or deny the case to pursue a property, given its current seller's asking price or mortgage terms, or rent potential. This research consists of crunching numbers for many similar properties on many different criteria using many various formulas. Real estate investors often do these calculations in their heads which can be prone to human error. This app will eventually evolve to handle these calculations, but for now, it simply gives the investor a clean, quick way to access investor-relevant data for each comp. 

As I've mentioned in a previous post, I'm actively learning about real estate investment and am planning tools to set up a successful business. I created this app as a tool for myself and other investors to help their businesses. In the past, you had to get comps directly from a real estate agent, who were the only ones with access to this information. However with Zillow and Redfin, comps data isn't privileged information anymore. This app was created with the goal of giving investors relevant data for their business without the clutter and noise of the Zillow website. How does it work you ask? Great question!
	
A user's search for the principal property's address results in a call to an initial Zillow API (getSearchResults) which retrieves the data for the principle property and creates a Ruby object for it. The most important piece of data from this initial search is the principle property's ZPID, which I think stands for "Zillow Property ID" but don't quote me on that. The ZPID is used as a param for a second call to another Zillow API (getDeepComps) which returns XML for our sweet, sweet comps data. Luckily there exists a gem called "rillow", authored by Leo Chan, which lets you (or me in this case) easily return the API data as a Ruby hash (instead of XML) with Ruby methods (instead of Faraday). The Rails controller creates the associated Comp objects with the Ruby and sends the user on a one-way flight to an Angular view that serves as the homepage for the rest of the app's functionality. 
	
Angular accesses the principal property and it's associated comps data as JSON objects using the getProperty factory (which is preferred over a service as it is more lightweight and doesn't come with unneeded features) by making an $http request. From here, I employed nested views using ui-router to create a property's home page, comps page, and a comp show page (plus an about page and a comments section). Users can filter through the comps through number of bathrooms (more options to come in the future) as well as a dynamically updating search function using ng-Model. The comps results are also paginated with 3 on a page to present the data in an easily digestible way. Clicking on a comp takes the user to the comp's show page which provides even more investor-nerdy figures as well as provide links to that property's various Zillow offerings. The comments page is interesting because here users can give feedback on what they like, dislike, and want to see from this app in the future. These comments are dynamically updated and the user inputted fields (user's name and text comment) are validated in Angular to to ensure that they exist and have minimum lengths. 

A huge breakthrough I had in the making of this app occurred after simply redoing my app with better design patterns. I used the John Papa style guide (google it) which magically made everything work the way it was supposed to and seemed to speed things up a bit as well. The reoccurring theme here was single responsibility principle and clear object oriented javascript. This means small functions that only do one thing, which are bundled into other small functions that do one thing, which are bundled into other ...(you get the idea) in a falling-domino way. This made the javascript so much more readable and clear. Plus I seemed to avoid many of the issues arising from not being used to javascript's asynchronous digest cycle and unresolved promises. I highly recommend the John Papa style guide to anyone who's learning Angular! 

